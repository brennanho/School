(load "myeval.scm")

(define simplify-base
  (lambda (expr)
    (cond
      ((and (equal? (car expr) 'inc) (number? (cadr expr)))
        (+ (cadr expr) 1))
      ((and (equal? (car expr) 'dec) (number? (cadr expr)))
        (- (cadr expr) 1))
      ((and (equal? (car expr) 'inc) (not (list? (cadr expr))))
        (list (cadr expr) '+ 1))
      ((and (equal? (car expr) 'dec) (not (list? (cadr expr))))
        (list (cadr expr) '- 1))
      ((and (equal? (cadr expr) '+) (equal? (car expr) 0))
           (last-of-expr expr))
      ((and (equal? (cadr expr) '+) (equal? (last-of-expr expr) 0))
           (car expr))
      ((and (equal? (cadr expr) '*) (equal? (car expr) 1))
           (last-of-expr expr))
      ((and (equal? (cadr expr) '*) (equal? (last-of-expr expr) 1))
           (car expr))
      ((and (equal? (cadr expr) '*) (equal? (car expr) 0))
           0)
      ((and (equal? (cadr expr) '*) (equal? (last-of-expr expr) 0))
           0)
      ((and (equal? (cadr expr) '/) (equal? (last-of-expr expr) 1))
           (car expr))
      ((and (equal? (cadr expr) '-) (equal? (last-of-expr expr) 0))
           (car expr))
      ((and (equal? (cadr expr) '-) (equal? (last-of-expr expr) (car expr)))
           0)
      ((and (equal? (cadr expr) '**) (equal? (last-of-expr expr) 0))
           1)
      ((and (equal? (cadr expr) '**) (equal? (last-of-expr expr) 1))
           (car expr))
      ((and (equal? (cadr expr) '**) (equal? (car expr) 1))
           1)
      (else
        expr  
      )
    )  
  )  
)

(define simplify
  (lambda (expr)
    (cond
      ((no-subexpr? expr)
        (simplify-base expr))
      ((= (length expr) 2)
          (simplify-base (list (car expr) (simplify (cadr expr)))))
      ((and (list? (car expr)) (list? (last-of-expr expr)))
          (simplify-base (list (simplify (car expr)) (cadr expr) (simplify (last-of-expr expr)))))
      ((list? (car expr))
          (simplify-base (list (simplify (car expr)) (cadr expr) (last-of-expr expr))))
      (else
          (simplify-base (list (car expr) (cadr expr) (simplify (last-of-expr expr))))
      )
    )
  )
)